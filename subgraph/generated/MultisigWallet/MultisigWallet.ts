// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Delegate extends ethereum.Event {
  get params(): Delegate__Params {
    return new Delegate__Params(this);
  }
}

export class Delegate__Params {
  _event: Delegate;

  constructor(event: Delegate) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RevokeDelegation extends ethereum.Event {
  get params(): RevokeDelegation__Params {
    return new RevokeDelegation__Params(this);
  }
}

export class RevokeDelegation__Params {
  _event: RevokeDelegation;

  constructor(event: RevokeDelegation) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SignerAdded extends ethereum.Event {
  get params(): SignerAdded__Params {
    return new SignerAdded__Params(this);
  }
}

export class SignerAdded__Params {
  _event: SignerAdded;

  constructor(event: SignerAdded) {
    this._event = event;
  }

  get signerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get cid(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class TransactionApproved extends ethereum.Event {
  get params(): TransactionApproved__Params {
    return new TransactionApproved__Params(this);
  }
}

export class TransactionApproved__Params {
  _event: TransactionApproved;

  constructor(event: TransactionApproved) {
    this._event = event;
  }

  get txnId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get approver(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransactionCreated extends ethereum.Event {
  get params(): TransactionCreated__Params {
    return new TransactionCreated__Params(this);
  }
}

export class TransactionCreated__Params {
  _event: TransactionCreated;

  constructor(event: TransactionCreated) {
    this._event = event;
  }

  get txnId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransactionExecuted extends ethereum.Event {
  get params(): TransactionExecuted__Params {
    return new TransactionExecuted__Params(this);
  }
}

export class TransactionExecuted__Params {
  _event: TransactionExecuted;

  constructor(event: TransactionExecuted) {
    this._event = event;
  }

  get txnId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get approver(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WalletCreated extends ethereum.Event {
  get params(): WalletCreated__Params {
    return new WalletCreated__Params(this);
  }
}

export class WalletCreated__Params {
  _event: WalletCreated;

  constructor(event: WalletCreated) {
    this._event = event;
  }

  get ownerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ownerCid(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class MultisigWallet__signersResult {
  value0: string;
  value1: Address;
  value2: BigInt;

  constructor(value0: string, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getCid(): string {
    return this.value0;
  }

  getDelegateTo(): Address {
    return this.value1;
  }

  getWeight(): BigInt {
    return this.value2;
  }
}

export class MultisigWallet__transactionsResult {
  value0: boolean;
  value1: Address;
  value2: BigInt;
  value3: BigInt;

  constructor(
    value0: boolean,
    value1: Address,
    value2: BigInt,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getExecuted(): boolean {
    return this.value0;
  }

  getTo(): Address {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }

  getApproval(): BigInt {
    return this.value3;
  }
}

export class MultisigWallet extends ethereum.SmartContract {
  static bind(address: Address): MultisigWallet {
    return new MultisigWallet("MultisigWallet", address);
  }

  _lockedBalance(): BigInt {
    let result = super.call("_lockedBalance", "_lockedBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try__lockedBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_lockedBalance",
      "_lockedBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _owner(): Address {
    let result = super.call("_owner", "_owner():(address)", []);

    return result[0].toAddress();
  }

  try__owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("_owner", "_owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _signerCount(): BigInt {
    let result = super.call("_signerCount", "_signerCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try__signerCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_signerCount", "_signerCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _txnId(): BigInt {
    let result = super.call("_txnId", "_txnId():(uint256)", []);

    return result[0].toBigInt();
  }

  try__txnId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_txnId", "_txnId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signers(param0: Address): MultisigWallet__signersResult {
    let result = super.call(
      "signers",
      "signers(address):(string,address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new MultisigWallet__signersResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_signers(
    param0: Address
  ): ethereum.CallResult<MultisigWallet__signersResult> {
    let result = super.tryCall(
      "signers",
      "signers(address):(string,address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MultisigWallet__signersResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  transactions(param0: BigInt): MultisigWallet__transactionsResult {
    let result = super.call(
      "transactions",
      "transactions(uint256):(bool,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MultisigWallet__transactionsResult(
      result[0].toBoolean(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_transactions(
    param0: BigInt
  ): ethereum.CallResult<MultisigWallet__transactionsResult> {
    let result = super.tryCall(
      "transactions",
      "transactions(uint256):(bool,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MultisigWallet__transactionsResult(
        value[0].toBoolean(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get cid_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddSignerCall extends ethereum.Call {
  get inputs(): AddSignerCall__Inputs {
    return new AddSignerCall__Inputs(this);
  }

  get outputs(): AddSignerCall__Outputs {
    return new AddSignerCall__Outputs(this);
  }
}

export class AddSignerCall__Inputs {
  _call: AddSignerCall;

  constructor(call: AddSignerCall) {
    this._call = call;
  }

  get signer_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cid_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class AddSignerCall__Outputs {
  _call: AddSignerCall;

  constructor(call: AddSignerCall) {
    this._call = call;
  }
}

export class ApproveTransactionCall extends ethereum.Call {
  get inputs(): ApproveTransactionCall__Inputs {
    return new ApproveTransactionCall__Inputs(this);
  }

  get outputs(): ApproveTransactionCall__Outputs {
    return new ApproveTransactionCall__Outputs(this);
  }
}

export class ApproveTransactionCall__Inputs {
  _call: ApproveTransactionCall;

  constructor(call: ApproveTransactionCall) {
    this._call = call;
  }

  get txnId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ApproveTransactionCall__Outputs {
  _call: ApproveTransactionCall;

  constructor(call: ApproveTransactionCall) {
    this._call = call;
  }
}

export class CreateTransactionCall extends ethereum.Call {
  get inputs(): CreateTransactionCall__Inputs {
    return new CreateTransactionCall__Inputs(this);
  }

  get outputs(): CreateTransactionCall__Outputs {
    return new CreateTransactionCall__Outputs(this);
  }
}

export class CreateTransactionCall__Inputs {
  _call: CreateTransactionCall;

  constructor(call: CreateTransactionCall) {
    this._call = call;
  }

  get to_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateTransactionCall__Outputs {
  _call: CreateTransactionCall;

  constructor(call: CreateTransactionCall) {
    this._call = call;
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get to_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class RevokeDelegationCall extends ethereum.Call {
  get inputs(): RevokeDelegationCall__Inputs {
    return new RevokeDelegationCall__Inputs(this);
  }

  get outputs(): RevokeDelegationCall__Outputs {
    return new RevokeDelegationCall__Outputs(this);
  }
}

export class RevokeDelegationCall__Inputs {
  _call: RevokeDelegationCall;

  constructor(call: RevokeDelegationCall) {
    this._call = call;
  }
}

export class RevokeDelegationCall__Outputs {
  _call: RevokeDelegationCall;

  constructor(call: RevokeDelegationCall) {
    this._call = call;
  }
}
